'use strict';var _typeof=typeof Symbol==='function'&&typeof Symbol.iterator==='symbol'?function(obj){return typeof obj}:function(obj){return obj&&typeof Symbol==='function'&&obj.constructor===Symbol?'symbol':typeof obj},_validator=require('validator'),Mask=require('string-mask'),StringFormatValidation=function StringFormatValidation(f,g){var b=__validateArguments(f,g);if(b){throw new Error(b)}var c=void 0;// if val is an obj iterate it's keys and look for matching rules
if((typeof g==='undefined'?'undefined':_typeof(g))==='object'){c={};for(var d in g){c[d]=a(f[d],g[d])}}else{c=a(f,g)}function a(){var h=arguments.length<=0||arguments[0]===undefined?{}:arguments[0],i=arguments[1],j=void 0,k=void 0;// check for format key in rules, first
if(h.format){k=_format(h.format,i)}// if rule 'required' === false then it's considered 'valid' (we don't validate)
if(h.require===false){j=true}else{j=_validate(h,i)}if(k){return{format:k,valid:j}}else{return j}}return c},_validate=StringFormatValidation.validate=function(){var a=arguments.length<=0||arguments[0]===undefined?{}:arguments[0],b=arguments[1];if(typeof b==='number'){// coerce to string
b+=''}// use 'validator' as 'v'
var c=!0;if(a.type){switch(a.type){case'date':c=(0,_validator.isDate)(b);break;case'email':c=(0,_validator.isEmail)(b);break;case'creditcard':c=(0,_validator.isCreditCard)(b);break;case'phone':try{c=b.match(/\d/g).join('').length===10}catch(e){c=false}break;case'number':c=(0,_validator.isInt)(b);break;}}if(!c){return c}if(a.min||a.max||a.size){var d=a.min||0;var f=a.max||undefined;var g=a.size||undefined;if(g){d=f=g}c=(0,_validator.isLength)(b,{min:d,max:f})}return c},_format=StringFormatValidation.format=(a,b)=>{try{b=b.match(/\w/g).join('')}catch(e){b=''}// use 'string-mask' as 'mask'
return new Mask(a,{}).apply(b)};/**
 * Export Our Function
 */module.exports=StringFormatValidation;var __validateArguments=(a,b)=>{var c=null,d='string-format-validation :: argument error - ',f=typeof a==='undefined'?'undefined':_typeof(a),g=typeof b==='undefined'?'undefined':_typeof(b);if(f!=='object'){c=d+'first argument is not an object'}else if(g!=='object'&&g!=='string'&&g!=='number'){c=d+'second argument must be string, number or object map that matches the rules map'}return c===null?false:c};
